#!/usr/bin/perl
##---------------------------------------------------------------------------##
##  File:
##      @(#) Linup
##  Author:
##      Robert M. Hubley   rhubley@systemsbiology.org
##  Description:
##
#******************************************************************************
#*  This software is provided ``AS IS'' and any express or implied            *
#*  warranties, including, but not limited to, the implied warranties of      *
#*  merchantability and fitness for a particular purpose, are disclaimed.     *
#*  In no event shall the authors or the Institute for Systems Biology        *
#*  liable for any direct, indirect, incidental, special, exemplary, or       *
#*  consequential damages (including, but not limited to, procurement of      *
#*  substitute goods or services; loss of use, data, or profits; or           *
#*  business interruption) however caused and on any theory of liability,     *
#*  whether in contract, strict liability, or tort (including negligence      *
#*  or otherwise) arising in any way out of the use of this software, even    *
#*  if advised of the possibility of such damage.                             *
#*                                                                            *
#******************************************************************************
#
# ChangeLog
#
#     $Log: Linup,v $
#     Revision 1.12  2017/04/05 00:03:32  rhubley
#     Cleanup before a distribution
#
#
###############################################################################
#
# To Do:
#

=head1 NAME

Linup - 

=head1 SYNOPSIS

  Linup [-version] [-i] [-matrix <matrix_file>
                        [-cgParam #] [-taParam # ] [-cgTransParam #] ]
                        [-trimLeft #] [-trimRight #] [-name familyname]
                        [-normalizeCoord] [-showScore] 
                        [-seqdb <fasta_file> -includeFlanking #]
                        [-stockholm | -msf | 
                         -consensus | -msa
                         -fasta ]
        <crossmatch file> | <stockholm file> | <msa fasta> | <malign file>


=head1 DESCRIPTION

Output Formats:
  MSF - GCG Wisconsin Package Format
  Stockholm - Stockholm format used by Dfam/Pfam/Rfam
  MSA - Aligned sequences stored in FASTA/A2M format
  FASTA - All sequences without alignment characters

The options are:

=over 4

=item -version

Displays the version of the program

=item -i

Include reference sequence in new consensus calculation.

=item -stockholm

Write out multiple alignment in Stockholm format.

=item -msf

Write out the multiple aligment in MSF format.

=item -msa

Write out the multiple alignment in MSA ( FASTA/A2M ) format.

=item -fasta

Write out the sequences in FASTA format.  NOTE: This
removes the gap characters and only exports the raw
sequences.

=item -consensus

Calculate the consensus and output in FASTA format excluding
the gap characters.

=item -showScore

Include score in the default Linup output format.

=item -seqdb <fasta_file>

This parameter is used in conjunction with the -msa and 
-includeFlanking parameters.  The fasta file should contain
the sequences (and flanking sequence) that was used to 
generate the alignments.  

=item -includeFlanking #

Include up to #bp of flanking sequence when using the -msa output
format and only if the -seqdb parameter is specified.  The same 
size string is appended/prepended to each aligned sequence 
regardless of available flanking bases using the "-" to pad out 
any differences.  The amount of available sequence is dependent 
on what is in the -seqdb file.

=back

=head1 SEE ALSO

=head1 COPYRIGHT

Copyright 2012-2019 Robert Hubley, Institute for Systems Biology

=head1 AUTHOR

Robert Hubley <rhubley@systemsbiology.org>
Arian Smit <asmit@systemsbiology.org>

=cut

#
# Module Dependence
#
use strict;
use FindBin;
use Getopt::Long;
use Data::Dumper;

# RepeatModeler Libraries
use lib $FindBin::RealBin;
use lib "$FindBin::RealBin/..";
use RepModelConfig;
use lib $RepModelConfig::configuration->{'REPEATMASKER_DIR'}->{'value'};
use MultAln;
use SeedAlignment;

# RepeatMasker Libraries
use SearchResult;
use SearchResultCollection;
use WUBlastSearchEngine;
use NCBIBlastSearchEngine;
use CrossmatchSearchEngine;
use FastaDB;


my $Version    = $RepModelConfig::VERSION;
my $ucscToolsDir = "/usr/local/bin";

#
# Magic numbers/constants here
#  ie. my $PI = 3.14159;
#
my $DEBUG = 0;
$DEBUG = 1 if ( $RepModelConfig::DEBUG == 1 );

#
# Option processing
#  e.g.
#   -t: Single letter binary option
#   -t=s: String parameters
#   -t=i: Number paramters
#
my @getopt_args = (
                    '-version',          # print out the version and exit
                    '-i',
                    '-stockholm',
                    '-showScore',
                    '-msf',
                    '-fasta',
                    '-msa',
                    '-consensus',
                    '-name=s',
                    '-trimLeft=s',
                    '-trimRight=s',
                    '-normalizeCoord',
                    '-matrix=s',
                    '-seqdb=s',
                    '-includeFlanking=i',
                    '-cgParam=s',
                    '-taParam=s',
                    '-cgTransParam=s',
);

my %options = ();
Getopt::Long::config( "noignorecase", "bundling_override" );
unless ( GetOptions( \%options, @getopt_args ) )
{
  usage();
}

sub usage
{
  print "$0 - $Version\n";
  exec "pod2text $0";
  exit;
}

if ( $options{'version'} )
{
  print "$Version\n";
  exit;
}

my $inputFile = $ARGV[ 0 ];
if ( !-s $inputFile )
{
  print "\nCannot locate file!: $inputFile\n\n";
  usage();
}

my $inclRef = 0;
$inclRef = 1 if ( $options{'i'} );

my $matrixFile;
my $cgParam;
my $taParam;
my $cgTransParam;
if ( $options{'matrix'} )
{
  $matrixFile = $options{'matrix'};
  if ( !exists $options{'cgParam'} )
  {
    print "\nMissing cgParam parameter.  Must be specified\n"
        . "if the matrix parameter is used.\n";
    usage();
  }
  $cgParam = $options{'cgParam'};
  if ( !exists $options{'taParam'} )
  {
    print "\nMissing taParam parameter.  Must be specified\n"
        . "if the matrix parameter is used.\n";
    usage();
  }
  $taParam = $options{'taParam'};
  if ( !exists $options{'cgTransParam'} )
  {
    print "\nMissing cgTransParam parameter.  Must be specified\n"
        . "if the matrix parameter is used.\n";
    usage();
  }
  $cgTransParam = $options{'cgTransParam'};
}

if ( $options{'includeFlanking'} && ! ( $options{'seqdb'} && $options{'msa'} ) ) {
  print "\nThe includeFlanking option is only valid with the -seqdb and -msa output format!\n";
  usage();
}

##
## Determine file type
##
open IN, "<$inputFile" or die "Could not open $inputFile for reading!\n";
my $maxLines = 10000;
my $fileType = "Unknown";
my $foundFastaHdr = 0;
while ( <IN> )
{
  next if (    /^\s*$/ 
            || /^(\W+).*Score:/ );
  last if ( $maxLines-- < 0 );
  if ( /^#\s+STOCKHOLM/ )
  {
    if ( $options{'includeFlanking'} ) 
    {
      print "\n\nThe includeFlanking parameter currently only works with *.out files!\n\n";
      usage();
    }
    $fileType = "stockholm";
    last;
  }
  if ( /^\s*\d+\s+[\d\.]+\s+[\d\.]+\s+[\d\.]+\s+\S+\s+\d+\s+\d+\s+\(\d+\)/ )
  {
    $fileType = "crossmatch";
    last;
  }
  $foundFastaHdr = 1 if ( /^>\S+.*/ );
  if ( $foundFastaHdr && /^\s*[ACGTUMRWSYKVHDBNacgtumrwsykvhdbn\-\.]+\s*$/ )
  {
    if ( $options{'includeFlanking'} ) 
    {
      print "\n\nThe includeFlanking parameter currently only works with *.out files!\n\n";
      usage();
    }
    $fileType = "msa-fasta";
    last;
  }
  if ( /^\s+\'alignCol\'\s+=>/ )
  {
    if ( $options{'includeFlanking'} ) 
    {
      print "\n\nThe includeFlanking parameter currently only works with *.out files!\n\n";
      usage();
    }
    $fileType = "malign";
    last;
  }
    
}
close IN;

if ( $fileType eq "Unknown" )
{
  die "Could not determine filetype for $inputFile.  Verify that\n"
      . "the file is either a cross_match, stockholm or an msa-fasta file.\n";
}

my $mAlign;
if ( $fileType eq "crossmatch" )
{
  my $resultCollection =
      CrossmatchSearchEngine::parseOutput( searchOutput => $inputFile );

  # TODO: Deprecate this and move it to SearchResultCollection.pm
  # Auto detect which input ( query/subject ) is the static sequence for
  # which all other sequences are aligned.
  my $queryID;
  my $subjID;
  my $staticQuery   = 1;
  my $staticSubject = 1;
  for ( my $i = 0 ; $i < $resultCollection->size() ; $i++ )
  {
    my $result = $resultCollection->get( $i );
    my $qID    = $result->getQueryName();
    my $sID    = $result->getSubjName();
    $staticQuery   = 0 if ( defined $queryID && $queryID ne $qID );
    $staticSubject = 0 if ( defined $subjID  && $subjID  ne $sID );
    die "Strange...this appears not to be a multiple alignment!"
        if ( $staticQuery == 0 && $staticSubject == 0 );
    $queryID = $qID;
    $subjID  = $sID;
  }
  die "Could not determine reference sequence.  This doesn't look like\n"
      . "a multiple alignment to one reference sequence!\n"
      if ( $staticQuery && $staticSubject );

  my $refInput = MultAln::Subject;
  $refInput = MultAln::Query if ( $staticQuery );

  if ( $options{'includeFlanking'} && $options{'seqdb'} ){
    my $fSeqDB = FastaDB->new( fileName => "repseq.bak",
                          openMode => SeqDBI::ReadOnly );
    $mAlign = MultAln->new(
                          referenceSeq              => "",
                          searchCollection          => $resultCollection,
                          searchCollectionReference => $refInput,
                          flankingSequenceDatabase  => $fSeqDB,
                          maxFlankingSequenceLen    => $options{'includeFlanking'} 
                          );
  }else {
    $mAlign = MultAln->new(
                          referenceSeq              => "",
                          searchCollection          => $resultCollection,
                          searchCollectionReference => $refInput
                           );
  }
} elsif ( $fileType eq "stockholm" )
{
  open my $IN, "<$inputFile" or die "Could not open $inputFile for reading";
  my $seedAlign = SeedAlignment->new();
  $seedAlign->read_stockholm( $IN );
  close $IN;
  $mAlign = MultAln->new( seedAlignment => $seedAlign );
}elsif ( $fileType eq "msa-fasta" )
{ 
  my @seqs;
  my $seq;
  my $id;
  open my $IN, "<$inputFile" or die "Could not open $inputFile for reading";
  # Simple FASTA reader
  my %idHash = ();
  while (<$IN>) {
    if ( /^>(\S+)/ ) 
    {
      my $tmpID = $1;
      if ( defined $idHash{$tmpID} ) {
        my $ver = 1;
        while ( defined $idHash{$tmpID . "_$ver"} ) 
        {
          $ver++;
        }
        warn "WARN File contains a duplicate identifier \"$tmpID\".  A suffix of \"_$ver\"\n" .
             "     will be appended to this occurence.\n";
        $tmpID = $tmpID . "_$ver";
      }
      $idHash{$tmpID}++;
      if ( $seq )
      {
        $seq = uc($seq);
        # Convert prefix/suffix "-"s to spacers
        if ( $seq =~ /^(\-+)/ ){
          substr($seq,0,length($1)) = " "x(length($1));
        }
        if ( $seq =~ /(\-+)$/ ) {
          substr($seq,length($seq)-length($1)-1) = " "x(length($1));
        }
        push @seqs, [ $id, $seq ];
      }
      $seq = "";
      $id = $tmpID;
      next;
    }
    s/[\s\n\r]+//g;
    $seq .= $_;
  }
  if ( $seq )
  {
    # Convert prefix/suffix "-"s to spacers
    if ( $seq =~ /^(\-+)/ ){
      substr($seq,0,length($1)) = " "x(length($1));
    }
    if ( $seq =~ /(\-+)$/ ) {
      substr($seq,length($seq)-length($1)-1) = " "x(length($1));
    }
 
    $seq = uc($seq);
    push @seqs, [ $id, $seq ];
  }
  close $IN;
  $mAlign = MultAln->new( sequences => \@seqs );
}elsif ( $fileType eq "malign" ){
  $mAlign = MultAln->new();
  $mAlign = $mAlign->serializeIN( $inputFile );
}else {
  die "Support for $fileType is not complete yet ";
}

my $trimLeft = 0;
$trimLeft = $options{'trimLeft'} if ( defined $options{'trimLeft'} );
my $trimRight = 0;
$trimRight = $options{'trimRight'} if ( defined $options{'trimRight'} );

if ( $trimLeft || $trimRight )
{
  print STDERR "Trimming alignment: left = $trimLeft, right = $trimRight\n";
  $mAlign->trimAlignments( left => $trimLeft, right => $trimRight );
}
if ( defined $options{'normalizeCoord'} ) {
    $mAlign->normalizeSeqRefs();
}

my $cons;
if ( $matrixFile eq "" )
{
  $cons = $mAlign->consensus( inclRef => $inclRef );
} else
{
  # TODO: Finish implementing
  # open up matrix file and create object
}

my ( $null, $totDiv, $avgDiv ) = $mAlign->kimuraDivergence( $cons );
if ( $options{'stockholm'} )
{
  if ( $options{'name'} ) { 
    $mAlign->setReferenceName( $options{'name'} );
  }
  $mAlign->toSTK( includeTemplate => 1, nuclRF => 1 );
} elsif ( $options{'msf'} )
{
  $mAlign->toMSF( includeReference => 1 );
} elsif ( $options{'fasta'} )
{
  $mAlign->toFASTA( seqOnly => 1 );
} elsif ( $options{'consensus'} ) {
  if ( $options{'consensus'} ) {
    $cons =~ s/-//g;
  }
  if ( $options{'name'} ) {
    print ">" . $options{'name'} . "\n$cons\n\n";
  }else {
    print ">" . $mAlign->getReferenceName() . "\n$cons\n\n";
  }
}elsif ( $options{'msa'} ) {
   # DEBUGING
   #for ( my $i = 0 ; $i < $mAlign->getNumAlignedSeqs() ; $i++ ) {
   #   my $name = $mAlign->getAlignedName( $i );
   #   my $qs = $mAlign->getAlignedSeqStart( $i );
   #   my $lFlank = $mAlign->getLeftFlankingSequence( $i );
   #   my $rFlank = $mAlign->getRightFlankingSequence( $i );
   #   print "$name ($i) - q:$qs\n lf=$lFlank\n rf=$rFlank\n";
   #}
  if ( exists $options{'includeFlanking'} && $options{'includeFlanking'} > 0 ) 
  {
    $mAlign->toFASTA( includeFlanking => $options{'includeFlanking'}, includeReference => $inclRef, includeConsensus => 1 );
  }else {
    $mAlign->toFASTA();
  }
}else
{
  $mAlign->printAlignments(
                            blockSize => 100,
                            showCons  => 1,
                            inclRef   => $inclRef,
                            showScore => $options{'showScore'}
  );
  print "Avg Kimura Div: $avgDiv\n";
  $cons =~ s/\-//g;
  if ( $options{'name'} ) {
    print "\n\n>" . $options{'name'} . "\n$cons\n\n";
  }else {
    print "\n\n>" . $mAlign->getReferenceName() . "\n$cons\n\n";
  }

}
print stderr "Avg Kimura Div: $avgDiv\n";

$mAlign->serializeOUT( "out.malign" );

1;
